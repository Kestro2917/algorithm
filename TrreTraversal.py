# -*- coding: utf-8 -*-
"""Lab10.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1f3J-GFkVT8p4hXCQi_uTwETkAWSj7mWD
"""

class TreeNode:
    def __init__(self, value, left, right):
        self.value = value
        self.left = left
        self.right = right

# Build the sample tree
grand_child1 = TreeNode(4, None, None)
grand_child2 = TreeNode(5, None, None)
child1 = TreeNode(9, grand_child1, grand_child2)
child2 = TreeNode(8, None, None)
parent = TreeNode(3, child1, child2)

# Traverse the tree - Pre order traversal (Root -> Left -> Right)
def traversePreOrder(node):
    if node:
        print(node.value, end=' ')
        traversePreOrder(node.left)
        traversePreOrder(node.right)

def trim(node):
    if node:
        node.value -= 1
        trim(node.left)
        trim(node.right)

def trim_leaves(node):
    if node:
        if node.left is None and node.right is None:  # Check if node is a leaf
            node.value -= 1
        trim_leaves(node.left)
        trim_leaves(node.right)

def mirror(node):
    if node:
        # Swap left and right subtrees
        node.left, node.right = node.right, node.left
        mirror(node.left)
        mirror(node.right)

print('Original tree:')
traversePreOrder(parent)

print('\nAfter trimming entire tree:')
trim(parent)
traversePreOrder(parent)

print('\nAfter trimming the leaves:')
trim_leaves(parent)
traversePreOrder(parent)

print('\nAfter switching branch values:')
mirror(parent)
traversePreOrder(parent)